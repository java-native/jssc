<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.java-native</groupId>
  <artifactId>jssc</artifactId>
  <version>2.9.3-SNAPSHOT</version>

  <name>Java Simple Serial Connector</name>
  <description>
    A small, single Java library for working with serial ports across various systems
    based on the work from scream3r/java-simple-serial-connector.
  </description>
  <url>https://github.com/java-native/jssc</url>

  <licenses>
    <license>
      <name>GNU LGPL 3</name>
      <url>http://www.gnu.org/licenses/lgpl.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Tres Finocchiaro</name>
      <url>https://github.com/tresf</url>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:https://github.com/java-native/jssc.git</connection>
    <developerConnection>scm:git:git@github.com:java-native/jssc.git</developerConnection>
    <url>https://github.com/java-native/jssc</url>
  </scm>

  <properties>
    <target.java.version>6</target.java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- custom directories and file paths a-z -->
    <cmake.generated.directory>${project.build.directory}/cmake</cmake.generated.directory>

    <!-- profile-dependant flags a-z -->
    <cmake.compile.skip>false</cmake.compile.skip>
    <cmake.generator.skip>false</cmake.generator.skip>
    <javah.skip>false</javah.skip>
    <jar.dependencies.skip>true</jar.dependencies.skip>

    <!-- dependency versions a-z -->
    <dependency.junit.version>4.12</dependency.junit.version>
    <dependency.logback.version>1.2.3</dependency.logback.version>
    <dependency.nativelibloader.version>2.3.5</dependency.nativelibloader.version>

    <!-- plugin versions a-z -->
    <plugin.animalsniffer.version>1.17</plugin.animalsniffer.version>
    <plugin.antrun.version>1.8</plugin.antrun.version>
    <plugin.assembly.version>3.1.1</plugin.assembly.version>
    <plugin.compiler.version>3.8.0</plugin.compiler.version>
    <plugin.enforcer.version>3.0.0-M3</plugin.enforcer.version>
    <plugin.jar.version>3.1.1</plugin.jar.version>
    <plugin.javadoc.version>3.1.1</plugin.javadoc.version>
    <plugin.nar.version>3.6.0</plugin.nar.version>
    <plugin.osmaven.version>1.7.0</plugin.osmaven.version>
    <plugin.signature.version>1.1</plugin.signature.version>
    <plugin.source.version>3.0.1</plugin.source.version>
    <plugin.surfire.version>3.0.0-M3</plugin.surfire.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>${dependency.nativelibloader.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${dependency.junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${dependency.logback.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>
    <resources>
        <resource>
          <directory>${project.basedir}/src/main/resources-precompiled</directory>
        </resource>
    </resources>

    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${plugin.osmaven.version}</version>
      </extension>
    </extensions>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${plugin.compiler.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${plugin.javadoc.version}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${plugin.source.version}</version>
        </plugin>

      </plugins>

    </pluginManagement>

    <plugins>
      <!-- Warn about not fully supported java version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${plugin.enforcer.version}</version>
        <executions>
          <execution>
            <id>recommended-jdk</id>
            <goals><goal>enforce</goal></goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[9,)</version>
                  <level>WARN</level>
                  <message>Current JDK does not support Java Platform Module System. Resulting jar cannot be used as Java module.</message>
                </requireJavaVersion>
                <requireJavaVersion>
                  <version>(,12)</version>
                  <level>WARN</level>
                  <message>Current JDK does not support target version 6. Minimal JRE to use the library on is ${target.java.version}.</message>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- create header file jdk<=8 -->
      <plugin>
        <groupId>com.github.maven-nar</groupId>
        <artifactId>nar-maven-plugin</artifactId>
        <version>${plugin.nar.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>default-nar-javah</id>
            <goals>
              <goal>nar-javah</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <skip>${javah.skip}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- execute cmake -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${plugin.antrun.version}</version>
        <executions>

          <execution>
            <id>cmake-generate</id>
            <goals><goal>run</goal></goals>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${cmake.generator.skip}</skip>
              <target name="cmake-generate">
                <mkdir dir="${cmake.generated.directory}"/>
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="${project.basedir}"/>
                  <!-- Set the native lib output directory or leave blank to let CMake calculate -->
                  <arg line="${cmake.generator.nativelibdir}"/>
                  <!-- Pass-in maven's JAVA_HOME, helps resolve jni.h -->
                  <arg line="-DJAVA_HOME=&quot;${java.home}&quot;"/>
                  <!-- Final generator argument should be blank or one of:
                       -DCMAKE_GENERATOR_PLATFORM=...
                       -DCMAKE_TOOLCHAIN_FILE=...
                       -DCMAKE_OSX_ARCHITECTURE=...
                  -->
                  <arg line="${cmake.generator.arg}"/>
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>cmake-compile</id>
            <goals><goal>run</goal></goals>
            <phase>compile</phase>
            <configuration>
              <skip>${cmake.compile.skip}</skip>
              <target name="cmake-build">
                <!-- copy header jdk<=8 -->
                <copy todir="${cmake.generated.directory}" flatten="true" overwrite="true" verbose="true" failonerror="false" quiet="true">
                  <fileset dir="${project.build.directory}/nar/" includes="**/*.h"/>
                </copy>
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="--build"/>
                  <arg line="."/>
                  <arg line="${cmake.build.arg}"/>
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>calculate-cmake-args</id>
            <phase>validate</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="calculate-target">
                <!-- Calculate the target system -->
                <!-- Note: Unlike maven, ant will preserve the value if already set -->
                <property name="os.target.name" value="${os.detected.name}"/>
                <property name="os.target.arch" value="${os.detected.arch}"/>
                <property name="os.target.bitness" value="${os.detected.bitness}"/>
                <property name="os.target.classifier" value="${os.target.name}-${os.target.arch}"/>

                <!-- Guess the compiler based on host os -->
                <!-- Windows: Assume MSVC -->
                <condition property="use.msvc" value="true">
                  <equals arg1="${os.detected.name}" arg2="windows"/>
                </condition>
                <!-- MacOS: Assume XCode -->
                <condition property="use.xcode" value="true">
                  <equals arg1="${os.detected.name}" arg2="osx"/>
                </condition>
                <!-- All others: Fallback on gcc -->
                <condition property="use.gcc" value="true">
                  <and>
                    <not>
                      <equals arg1="${os.detected.name}" arg2="osx"/>
                    </not>
                    <not>
                      <equals arg1="${os.detected.name}" arg2="windows"/>
                    </not>
                  </and>
                </condition>

                <!-- Translate "NATIVE_LIB_DIR" prefix portion:
                  - os.target.arch: must compare to a valid os value from os-maven-plugin
                  - os.target.nativelib.suffix: must be set to a valid directory os value from native-lib-loader plugin
                -->
                <property name="nativelibdir.prefix" value="${os.target.name}"/>

                <!-- Translate "NATIVE_LIB_DIR" suffix portion:
                  - os.target.arch: must compare to a valid arch value from os-maven-plugin
                  - os.target.nativelib.suffix: must be set to a valid directory suffix value from native-lib-loader plugin
                -->
                <!-- "x86_64" <=> "64" -->
                <condition property="nativelibdir.suffix" value="64">
                  <equals arg1="${os.target.arch}" arg2="x86_64"/>
                </condition>
                <!-- "x86_32" <=> "32" -->
                <condition property="nativelibdir.suffix" value="32">
                  <equals arg1="${os.target.arch}" arg2="x86_32"/>
                </condition>
                <!-- "aarch_64" <=> "arm64" -->
                <condition property="nativelibdir.suffix" value="arm64">
                  <equals arg1="${os.target.arch}" arg2="aarch_64"/>
                </condition>
                <!-- "arm_32" <=> "arm" -->
                <condition property="nativelibdir.suffix" value="arm">
                  <equals arg1="${os.target.arch}" arg2="arm_32"/>
                </condition>
                <!-- "ppc_64" <=> "ppc" -->
                <condition property="nativelibdir.suffix" value="ppc">
                  <equals arg1="${os.target.arch}" arg2="ppc_64"/>
                </condition>

                <!-- Set cmake property "NATIVE_LIB_DIR" -->
                <property name="cmake.generator.nativelibdir" value="-DNATIVE_LIB_DIR=&quot;${nativelibdir.prefix}_${nativelibdir.suffix}&quot;"/>

                <!-- Handle toolchain files -->
                <condition property="cmake.generator.arg" value="-DCMAKE_TOOLCHAIN_FILE=&quot;${project.basedir}/toolchain/${os.target.toolchain}.cmake&quot;">
                  <isset property="os.target.toolchain"/>
                </condition>

                <!-- Setup maven assembly id -->
                <property name="maven.assembly.id" value="${os.target.name}-${os.target.arch}-${os.target.bitness}"/>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

          <execution>
            <id>calculate-msvc</id>
            <phase>validate</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="calculate-msvc" if="use.msvc">
                <!-- Translate arch to msvc format -->
                <!--
                  - os.target.arch: must compare to a valid os value from os-maven-plugin
                  - msvc.platform: must be set to a valid value from cmake "-A" option for visual studio platform selection
                -->
                <!-- "x86_64" <=> "x64" -->
                <condition property="msvc.arch" value="x64">
                  <equals arg1="${os.target.arch}" arg2="x86_64"/>
                </condition>
                <!-- "x86_32" <=> "Win32" -->
                <condition property="msvc.arch" value="Win32">
                  <equals arg1="${os.target.arch}" arg2="x86_32"/>
                </condition>
                <!-- "arm_32" <=> "ARM" -->
                <condition property="msvc.arch" value="ARM">
                  <equals arg1="${os.target.arch}" arg2="arm_32"/>
                </condition>
                <!-- "aarch_64" <=> "ARM64" -->
                <condition property="msvc.arch" value="ARM64">
                  <equals arg1="${os.target.arch}" arg2="aarch_64"/>
                </condition>

                <!-- Set cmake property "CMAKE_GENERATOR_PLATFORM" -->
                <property name="cmake.generator.arg" value="-DCMAKE_GENERATOR_PLATFORM=${msvc.arch}"/>

                <!-- Set cmake build to release -->
                <property name="cmake.build.arg" value="--config Release"/>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

          <execution>
            <id>calculate-xcode</id>
            <phase>validate</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="calculate-xcode" if="use.xcode">
                <!-- Translate arch to xcode format -->
                <!--
                  - os.target.arch: must compare to a valid os value from os-maven-plugin
                  - xcode.arch: must be set to a valid value llvm/clang triple arch type
                -->
                <!-- x86_64 <=> x86_64 -->
                <condition property="xcode.arch" value="x86_64">
                  <equals arg1="${os.target.arch}" arg2="x86_64"/>
                </condition>
                <!-- x86_32 <=> x86 -->
                <condition property="xcode.arch" value="x86">
                  <equals arg1="${os.target.arch}" arg2="x86_32"/>
                </condition>
                <!-- aarch_64 <=> arm64 -->
                <condition property="xcode.arch" value="arm64">
                  <equals arg1="${os.target.arch}" arg2="aarch_64"/>
                </condition>
                <!-- arm_32 <=> arm -->
                <condition property="xcode.arch" value="arm">
                  <equals arg1="${os.target.arch}" arg2="arm_32"/>
                </condition>

                <!-- Set cmake property "CMAKE_OSX_ARCHITECTURES" -->
                <property name="cmake.generator.arg" value="-DCMAKE_OSX_ARCHITECTURES=${xcode.arch}"/>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

          <execution>
            <id>set-missing-properties</id>
            <phase>validate</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="set-missing-properties">
                <!-- makes sure any unset cmake properties fallback to a blank value  -->
                <!-- this works because ant properties cannot be changed once set-->
                <property description="fallback value" name="cmake.build.arg" value=""/>
                <property description="fallback value" name="cmake.generator.arg" value=""/>
                <property description="fallback value" name="cmake.generator.nativelibdir" value=""/>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

          <execution>
            <id>calculate-testable</id>
            <phase>compile</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="calculate-testable">
                <!-- Calculate if tests will run -->
                <condition property="maven.test.skip" value="true" else="true">
                  <!-- Honor existing flag if set -->
                  <and>
                    <not>
                      <isset property="maven.test.skip"/>
                    </not>
                    <!-- Run tests if detected system matches target system -->
                    <equals arg1="${os.target.classifier}" arg2="${os.detected.classifier}"/>
                  </and>
                </condition>

                <!-- Summarize host/target -->
                <echo level="info">Tests will run only if the TARGET and HOST match:${line.separator}${line.separator}</echo>
                <echo level="info">TARGET:   ${os.target.classifier}</echo>
                <echo level="info">DETECTED: ${os.detected.classifier}</echo>
                <echo level="info"/>

                <!-- Negate result for human readability -->
                <condition property="maven.test.message" value="Tests will NOT run" else="Tests WILL run">
                  <equals arg1="${maven.test.skip}" arg2="true"/>
                </condition>
                <echo level="info">===== ${maven.test.message} =====</echo>
                <echo level="info"/>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

          <execution>
            <id>show-file-info</id>
            <phase>install</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="show-file-info" unless="use.msvc">
                <!-- Show binary output file information -->
                <property name="native.dir" value="${project.build.directory}/cmake/natives/${nativelibdir.prefix}_${nativelibdir.suffix}"/>
                <fileset id="native.files" dir="${native.dir}" includes="*"/>
                <echo level="info">File information:</echo>
                <exec executable="file">
                  <arg value="${native.dir}/${toString:native.files}"/>
                </exec>
                <echo level="info"></echo>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${target.java.version}</source>
          <target>${target.java.version}</target>
          <compilerArgument>-Xlint:all</compilerArgument>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${plugin.surfire.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${plugin.jar.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <!-- workaround for https://bugs.openjdk.java.net/browse/JDK-8212233 -->
          <javaApiLinks>
            <property>
              <name>foo</name>
              <value>bar</value>
            </property>
          </javaApiLinks>
        </configuration>
      </plugin>

      <!-- package the uber-jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${plugin.assembly.version}</version>

        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <skipAssembly>${cmake.generator.skip}</skipAssembly>
              <descriptors>
                <descriptor>${project.basedir}/src/assembly/one-off-jar.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>

          <execution>
            <id>fat-jar</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <skipAssembly>${jar.dependencies.skip}</skipAssembly>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- check for java 6 compatibility -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>${plugin.animalsniffer.version}</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java16</artifactId>
            <version>${plugin.signature.version}</version>
          </signature>
        </configuration>
        <executions>
          <execution>
            <id>ensure-java-1.6-class-library</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <!-- Standard profile for compiling classes with widest target range.
         The resulting jar just works on jre6+ as well as a part of JPMS.
         Resulting artifact is deployable to Maven Central -->
    <profile>
      <id>jdk9+</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <javah.skip>true</javah.skip>
        <maven.compiler.release>${target.java.version}</maven.compiler.release>
        <plugin.animalsniffer.version>1.20</plugin.animalsniffer.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <compilerArgs>
                <arg>-h</arg>
                <arg>${cmake.generated.directory}</arg>
              </compilerArgs>
            </configuration>
            <executions>
              <!-- compile everything to ensure module-info contains right entries -->
              <execution>
                <id>default-compile</id>
                <configuration>
                  <release>9</release>
                  <compileSourceRoots>
                    <sourceRoot>src/main/java</sourceRoot>
                    <sourceRoot>src/main/module-info</sourceRoot>
                  </compileSourceRoots>
                </configuration>
              </execution>
              <!-- recompile everything for target VM except the module-info.java -->
              <execution>
                <id>minimal-target-jre-recompile</id>
                <goals><goal>compile</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Convenience profile for users of JDKs past 11 who may want to
         build the library ignoring no longer supported target version 6 -->
    <profile>
      <id>jdk12+</id>
      <activation>
        <jdk>[12,)</jdk>
      </activation>
      <properties>
        <target.java.version>7</target.java.version>
      </properties>
    </profile>

    <!-- collect existing native libraries for a distribution; skips native compilation -->
    <profile>
      <id>package</id>
      <properties>
        <javah.skip>true</javah.skip>
        <maven.test.skip>true</maven.test.skip>
        <cmake.generator.skip>true</cmake.generator.skip>
        <cmake.compile.skip>true</cmake.compile.skip>
      </properties>

     <build>
       <plugins>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-source-plugin</artifactId>
           <executions>
             <execution>
               <id>attach-sources</id>
               <goals>
                 <goal>jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>

         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-javadoc-plugin</artifactId>
           <executions>
             <execution>
               <id>attach-javadocs</id>
               <goals>
                 <goal>jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>
       </plugins>
     </build>
    </profile>

    <profile>
      <id>jar-with-dependencies</id>
      <properties>
        <jar.dependencies.skip>false</jar.dependencies.skip>
      </properties>
    </profile>

    <!-- Cross compile for aarch64 -->
    <profile>
      <id>aarch64</id>
      <properties>
        <os.target.arch>aarch_64</os.target.arch>
      </properties>
    </profile>

    <!-- Cross compile for x86_64 -->
    <profile>
      <id>x86_64</id>
      <properties>
        <os.target.arch>x86_64</os.target.arch>
      </properties>
    </profile>

    <!-- Cross compile for x86 -->
    <profile>
      <id>x86</id>
      <properties>
        <os.target.arch>x86_32</os.target.arch>
      </properties>
    </profile>

    <!-- Cross compile for win32 using mingw -->
    <profile>
      <id>mingw32</id>
      <properties>
        <os.target.toolchain>Mingw32</os.target.toolchain>

        <os.target.name>windows</os.target.name>
        <os.target.arch>x86_32</os.target.arch>
        <os.target.bitness>32</os.target.bitness>
      </properties>
    </profile>

    <!-- Cross compile for win64 using mingw -->
    <profile>
      <id>mingw64</id>
      <properties>
        <os.target.toolchain>Mingw64</os.target.toolchain>

        <os.target.name>windows</os.target.name>
        <os.target.arch>x86_64</os.target.arch>
        <os.target.bitness>64</os.target.bitness>
      </properties>
    </profile>

    <!-- Cross compile for win arm64 using mingw -->
    <profile>
      <id>mingwaarch64</id>
      <properties>
        <os.target.toolchain>MingwAarch64</os.target.toolchain>

        <os.target.name>windows</os.target.name>
        <os.target.arch>arm_64</os.target.arch>
        <os.target.bitness>64</os.target.bitness>
      </properties>
    </profile>

    <!-- Cross compile for ppc64 -->
    <profile>
      <id>ppc64</id>
      <properties>
        <os.target.toolchain>Ppc64</os.target.toolchain>

        <os.target.name>linux</os.target.name>
        <os.target.arch>ppc_64</os.target.arch>
        <os.target.bitness>64</os.target.bitness>
      </properties>
    </profile>

    <!-- Cross compile for arm32hf (hardware floating point) -->
    <profile>
      <id>armhf</id>
      <properties>
        <os.target.toolchain>Armhf</os.target.toolchain>

        <os.target.name>linux</os.target.name>
        <!-- TODO: namespace conflict with arm soft float library.  See also cmake's HAS_FPU -->
        <os.target.arch>arm_32</os.target.arch>
        <os.target.bitness>32</os.target.bitness>
      </properties>
    </profile>

    <!-- Cross compile for arm32sf (software floating point) -->
    <profile>
      <id>armsf</id>
      <properties>
        <os.target.toolchain>Armsf</os.target.toolchain>

        <os.target.name>linux</os.target.name>
        <!-- TODO: namespace conflict with arm hard float library.  See also cmake's HAS_FPU -->
        <os.target.arch>arm_32</os.target.arch>
        <os.target.bitness>32</os.target.bitness>
      </properties>
    </profile>

  </profiles>
</project>
