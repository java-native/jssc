<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.java-native</groupId>
  <artifactId>jssc</artifactId>
  <version>2.9.3-SNAPSHOT</version>

  <name>Java Simple Serial Connector</name>
  <description>
    A small, single Java library for working with serial ports across various systems
    based on the work from scream3r/java-simple-serial-connector.
  </description>
  <url>https://github.com/java-native/jssc</url>

  <licenses>
    <license>
      <name>GNU LGPL 3</name>
      <url>http://www.gnu.org/licenses/lgpl.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Tres Finocchiaro</name>
      <url>https://github.com/tresf</url>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:https://github.com/java-native/jssc.git</connection>
    <developerConnection>scm:git:git@github.com:java-native/jssc.git</developerConnection>
    <url>https://github.com/java-native/jssc</url>
  </scm>

  <properties>
    <target.java.version>6</target.java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- custom directories and file paths a-z -->
    <cmake.generated.directory>${project.build.directory}/cmake</cmake.generated.directory>

    <!-- profile-dependant flags a-z -->
    <cmake.compile.skip>false</cmake.compile.skip>
    <cmake.build.args></cmake.build.args>
    <cmake.generator.gccarch>IGNORE</cmake.generator.gccarch>
    <cmake.generator.arg></cmake.generator.arg>
    <cmake.generator.nativelibdir></cmake.generator.nativelibdir>
    <cmake.generator.msvcplatform></cmake.generator.msvcplatform>
    <cmake.generator.osxarchitectures></cmake.generator.osxarchitectures>
    <cmake.generator.skip>false</cmake.generator.skip>
    <cmake.toolchain.file></cmake.toolchain.file>
    <javah.skip>false</javah.skip>
    <jar.dependencies.skip>true</jar.dependencies.skip>
    <maven.assembly.id>${os.detected.name}-${os.detected.arch}-${os.detected.bitness}</maven.assembly.id>

    <!-- dependency versions a-z -->
    <dependency.junit.version>4.12</dependency.junit.version>
    <dependency.logback.version>1.2.3</dependency.logback.version>
    <dependency.nativelibloader.version>2.3.5</dependency.nativelibloader.version>

    <!-- plugin versions a-z -->
    <plugin.animalsniffer.version>1.17</plugin.animalsniffer.version>
    <plugin.antrun.version>1.8</plugin.antrun.version>
    <plugin.assembly.version>3.1.1</plugin.assembly.version>
    <plugin.compiler.version>3.8.0</plugin.compiler.version>
    <plugin.enforcer.version>3.0.0-M3</plugin.enforcer.version>
    <plugin.jar.version>3.1.1</plugin.jar.version>
    <plugin.javadoc.version>3.1.1</plugin.javadoc.version>
    <plugin.nar.version>3.6.0</plugin.nar.version>
    <plugin.osmaven.version>1.7.0</plugin.osmaven.version>
    <plugin.signature.version>1.1</plugin.signature.version>
    <plugin.source.version>3.0.1</plugin.source.version>
    <plugin.surfire.version>3.0.0-M3</plugin.surfire.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>${dependency.nativelibloader.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${dependency.junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${dependency.logback.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>
    <resources>
        <resource>
          <directory>${project.basedir}/src/main/resources-precompiled</directory>
        </resource>
    </resources>

    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${plugin.osmaven.version}</version>
      </extension>
    </extensions>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${plugin.compiler.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${plugin.javadoc.version}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${plugin.source.version}</version>
        </plugin>

      </plugins>

    </pluginManagement>

    <plugins>
      <!-- Warn about not fully supported java version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${plugin.enforcer.version}</version>
        <executions>
          <execution>
            <id>recommended-jdk</id>
            <goals><goal>enforce</goal></goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[9,)</version>
                  <level>WARN</level>
                  <message>Current JDK does not support Java Platform Module System. Resulting jar cannot be used as Java module.</message>
                </requireJavaVersion>
                <requireJavaVersion>
                  <version>(,12)</version>
                  <level>WARN</level>
                  <message>Current JDK does not support target version 6. Minimal JRE to use the library on is ${target.java.version}.</message>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- create header file jdk<=8 -->
      <plugin>
        <groupId>com.github.maven-nar</groupId>
        <artifactId>nar-maven-plugin</artifactId>
        <version>${plugin.nar.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>default-nar-javah</id>
            <goals>
              <goal>nar-javah</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <skip>${javah.skip}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- execute cmake -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${plugin.antrun.version}</version>
        <executions>

          <execution>
            <id>cmake-generate</id>
            <goals><goal>run</goal></goals>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${cmake.generator.skip}</skip>
              <target name="cmake-generate">
                <mkdir dir="${cmake.generated.directory}"/>
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="${project.basedir}"/>
                  <!-- Set the native lib output directory or leave blank to let CMake calculate -->
                  <arg line="-DNATIVE_LIB_DIR=&quot;${cmake.generator.nativelibdir}&quot;"/>
                  <!-- Pass-in maven's JAVA_HOME, helps resolve jni.h -->
                  <arg line="-DJAVA_HOME=&quot;${java.home}&quot;"/>
                  <!-- Final generator argument should be blank or one of:
                       -DCMAKE_GENERATOR_PLATFORM=...
                       -DCMAKE_TOOLCHAIN_FILE=...
                       -DCMAKE_OSX_ARCHITECTURE=...
                  -->
                  <arg line="${cmake.generator.arg}"/>
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>cmake-compile</id>
            <goals><goal>run</goal></goals>
            <phase>compile</phase>
            <configuration>
              <skip>${cmake.compile.skip}</skip>
              <target name="cmake-build">
                <!-- copy header jdk<=8 -->
                <copy todir="${cmake.generated.directory}" flatten="true" overwrite="true" verbose="true" failonerror="false" quiet="true">
                  <fileset dir="${project.build.directory}/nar/" includes="**/*.h"/>
                </copy>
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="--build"/>
                  <arg line="."/>
                  <arg line="${cmake.build.args}"/>
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>maven-test-helper</id>
            <phase>compile</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <exportAntProperties>true</exportAntProperties>
              <target name="maven-test-helper">
                <!-- Calculate the target system -->
                <property name="maven.host.system" value="${os.arch} [${os.name}]"/>
                <condition property="maven.target.system" value="${maven.test.skip.compare}" else="${os.arch} [${os.name}]">
                  <isset property="maven.test.skip.compare"/>
                </condition>

                <!-- Summarize host/target -->
                <echo level="info">Tests will run only if the TARGET and HOST match:${line.separator}${line.separator}</echo>
                <echo level="info">TARGET:  ${maven.target.system}</echo>
                <echo level="info">HOST:    ${maven.host.system}</echo>
                <echo level="info"/>

                <!-- Determine if tests should run -->
                <condition property="maven.test.skip" value="true">
                  <and>
                    <!-- Honor value if already set -->
                    <not>
                      <isset property="maven.test.skip"/>
                    </not>
                    <!-- Make sure we have a value to compare
                    <isset property="maven.test.skip.compare"/> -->
                    <!-- Assume unit tests are impossible if host and target systems are mismatched -->
                    <not>
                      <equals arg1="${maven.host.system}" arg2="${maven.target.system}"/>
                    </not>
                  </and>
                </condition>

                <!-- Negate result for human readability -->
                <condition property="maven.test.message" value="Tests will NOT run" else="Tests WILL run">
                  <equals arg1="${maven.test.skip}" arg2="true"/>
                </condition>
                <echo level="info">===== ${maven.test.message} =====</echo>
                <echo level="info"/>
              </target>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${target.java.version}</source>
          <target>${target.java.version}</target>
          <compilerArgument>-Xlint:all</compilerArgument>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${plugin.surfire.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${plugin.jar.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <!-- workaround for https://bugs.openjdk.java.net/browse/JDK-8212233 -->
          <javaApiLinks>
            <property>
              <name>foo</name>
              <value>bar</value>
            </property>
          </javaApiLinks>
        </configuration>
      </plugin>

      <!-- package the uber-jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${plugin.assembly.version}</version>

        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <skipAssembly>${cmake.generator.skip}</skipAssembly>
              <descriptors>
                <descriptor>${project.basedir}/src/assembly/one-off-jar.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>

          <execution>
            <id>fat-jar</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <skipAssembly>${jar.dependencies.skip}</skipAssembly>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- check for java 6 compatibility -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>${plugin.animalsniffer.version}</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java16</artifactId>
            <version>${plugin.signature.version}</version>
          </signature>
        </configuration>
        <executions>
          <execution>
            <id>ensure-java-1.6-class-library</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <!-- Standard profile for compiling classes with widest target range.
         The resulting jar just works on jre6+ as well as a part of JPMS.
         Resulting artifact is deployable to Maven Central -->
    <profile>
      <id>jdk9+</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <javah.skip>true</javah.skip>
        <maven.compiler.release>${target.java.version}</maven.compiler.release>
        <plugin.animalsniffer.version>1.20</plugin.animalsniffer.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <compilerArgs>
                <arg>-h</arg>
                <arg>${cmake.generated.directory}</arg>
              </compilerArgs>
            </configuration>
            <executions>
              <!-- compile everything to ensure module-info contains right entries -->
              <execution>
                <id>default-compile</id>
                <configuration>
                  <release>9</release>
                  <compileSourceRoots>
                    <sourceRoot>src/main/java</sourceRoot>
                    <sourceRoot>src/main/module-info</sourceRoot>
                  </compileSourceRoots>
                </configuration>
              </execution>
              <!-- recompile everything for target VM except the module-info.java -->
              <execution>
                <id>minimal-target-jre-recompile</id>
                <goals><goal>compile</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Convenience profile for users of JDKs past 11 who may want to
         build the library ignoring no longer supported target version 6 -->
    <profile>
      <id>jdk12+</id>
      <activation>
        <jdk>[12,)</jdk>
      </activation>
      <properties>
        <target.java.version>7</target.java.version>
      </properties>
    </profile>

    <!-- collect existing native libraries for a distribution; skips native compilation -->
    <profile>
      <id>package</id>
      <properties>
        <javah.skip>true</javah.skip>
        <maven.test.skip>true</maven.test.skip>
        <cmake.generator.skip>true</cmake.generator.skip>
        <cmake.compile.skip>true</cmake.compile.skip>
      </properties>

     <build>
       <plugins>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-source-plugin</artifactId>
           <executions>
             <execution>
               <id>attach-sources</id>
               <goals>
                 <goal>jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>

         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-javadoc-plugin</artifactId>
           <executions>
             <execution>
               <id>attach-javadocs</id>
               <goals>
                 <goal>jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>
       </plugins>
     </build>
    </profile>

    <profile>
      <id>jar-with-dependencies</id>
      <properties>
        <jar.dependencies.skip>false</jar.dependencies.skip>
      </properties>
    </profile>

    <!-- Set os.detected.arch; may be overridden lower -->
    <profile>
      <id>aarch64_detected</id>
      <activation>
        <os>
          <arch>aarch64</arch>
        </os>
      </activation>
      <properties>
        <os.detected.arch>aarch_64</os.detected.arch>
      </properties>
    </profile>
    <profile>
      <id>x86_64_detected</id>
      <activation>
        <os>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <os.detected.arch>x86_64</os.detected.arch>
      </properties>
    </profile>
    <profile>
      <id>x86_detected</id>
      <activation>
        <os>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <os.detected.arch>x86_32</os.detected.arch>
      </properties>
    </profile>

    <!-- cmake generic arm64 profile (all platforms) -->
    <profile>
      <id>aarch64</id>
      <activation>
        <property>
          <name>os.detected.arch</name>
          <value>aarch_64</value>
        </property>
      </activation>
      <properties>
        <os.detected.arch>aarch_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.nativelibdir>${os.detected.name}_arm64</cmake.generator.nativelibdir>
        <!-- msvc only -->
        <cmake.generator.msvcplatform>ARM64</cmake.generator.msvcplatform>
        <!-- macos only -->
        <cmake.generator.osxarchitectures>arm64</cmake.generator.osxarchitectures>
        <!-- used to calculate if java is running natively -->
        <maven.test.skip.compare>aarch64 [${os.name}]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake generic x86_64 profile (all platforms) -->
    <profile>
      <id>x86_64</id>
      <activation>
        <property>
          <name>os.detected.arch</name>
          <value>x86_64</value>
        </property>
      </activation>
      <properties>
        <os.detected.arch>x86_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.nativelibdir>${os.detected.name}_64</cmake.generator.nativelibdir>
        <!-- msvc only -->
        <cmake.generator.msvcplatform>x64</cmake.generator.msvcplatform>
        <!-- macos only -->
        <cmake.generator.osxarchitectures>x86_64</cmake.generator.osxarchitectures>
        <!-- linux only -->
        <cmake.generator.gccarch>M64</cmake.generator.gccarch>
        <!-- used to calculate if java is running natively -->
        <maven.test.skip.compare>amd64 [${os.name}]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake generic x86 profile (all platforms) -->
    <profile>
      <id>x86</id>
      <activation>
        <property>
          <name>os.detected.arch</name>
          <value>x86_32</value>
        </property>
      </activation>
      <properties>
        <os.detected.arch>x86_32</os.detected.arch>
        <os.detected.bitness>32</os.detected.bitness>
        <cmake.generator.nativelibdir>${os.detected.name}_32</cmake.generator.nativelibdir>
        <!-- msvc only -->
        <cmake.generator.msvcplatform>Win32</cmake.generator.msvcplatform>
        <!-- macos only -->
        <cmake.generator.osxarchitectures>x86_64</cmake.generator.osxarchitectures>
        <!-- linux only -->
        <cmake.generator.gccarchitecture>M32</cmake.generator.gccarchitecture>
        <!-- used to calculate if java is running natively -->
        <maven.test.skip.compare>x86 [${os.name}]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake msvc profile, must occur after generic profile above -->
    <profile>
      <id>msvc</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <cmake.generator.arg>-DCMAKE_GENERATOR_PLATFORM=${cmake.generator.msvcplatform}</cmake.generator.arg>
        <!-- Release is needed on Windows per https://stackoverflow.com/a/20423820/3196753 -->
        <cmake.build.args>--config Release</cmake.build.args>
      </properties>
    </profile>

    <!-- cmake linux profile, must occur after generic profile above -->
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <!-- warning, "unix" will match "macos" too -->
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <!-- Should be one of:
             FORCE_M32
             FORCE_M64
        -->
        <cmake.generator.arg>"-DFORCE_${cmake.generator.gccarch}=True"</cmake.generator.arg>
      </properties>
    </profile>

    <!-- cmake macos profile, must occur after generic profile above -->
    <profile>
      <id>macos</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <cmake.generator.arg>-DCMAKE_OSX_ARCHITECTURES=${cmake.generator.osxarchitectures}</cmake.generator.arg>
      </properties>
    </profile>

    <!-- cmake mingw32 profile, must occur after os profiles above -->
    <profile>
      <id>mingw32</id>
      <properties>
        <!-- override os-maven-plugin values -->
        <os.detected.name>windows</os.detected.name>
        <os.detected.arch>x86_32</os.detected.arch>
        <os.detected.bitness>32</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Mingw${os.detected.bitness}.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_${os.detected.bitness}</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>x86 [Windows]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake mingw64 profile, must occur after os profiles above -->
    <profile>
      <id>mingw64</id>
      <properties>
        <os.detected.name>windows</os.detected.name>
        <os.detected.arch>x86_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Mingw${os.detected.bitness}.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_${os.detected.bitness}</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>amd64 [Windows]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake mingwaarch64 profile, must occur after os profiles above -->
    <profile>
      <id>mingwaarch64</id>
      <properties>
        <os.detected.name>windows</os.detected.name>
        <os.detected.arch>arm_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/MingwAarch64.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>windows_arm64</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>aarch64 [Windows]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake arm soft float profile, must occur after os profiles above -->
    <profile>
      <id>armsf</id>
      <properties>
        <os.detected.name>linux</os.detected.name>
        <os.detected.arch>arm_32</os.detected.arch>
        <os.detected.bitness>32</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Armsf.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_arm</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>armsf [Linux]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake arm hard float profile, must occur after os profiles above -->
    <profile>
      <id>armhf</id>
      <properties>
        <os.detected.name>linux</os.detected.name>
        <os.detected.arch>arm_32</os.detected.arch>
        <os.detected.bitness>32</os.detected.bitness>
        <!-- TODO: namespace conflict with arm soft float library.  See also cmake's HAS_FPU -->
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Armhf.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_arm</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>armhf [Linux]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake powerpc profile, must occur after os profiles above -->
    <profile>
      <id>ppc64</id>
      <properties>
        <os.detected.name>linux</os.detected.name>
        <os.detected.arch>ppc_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Ppc64.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_ppc</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>ppc64 [Linux]</maven.test.skip.compare>
      </properties>
    </profile>

    <!-- cmake aarch64 linux profile, must occur after os profiles above -->
    <profile>
      <id>linux-aarch64</id>
      <properties>
        <os.detected.name>linux</os.detected.name>
        <os.detected.arch>arm_64</os.detected.arch>
        <os.detected.bitness>64</os.detected.bitness>
        <cmake.generator.arg>-DCMAKE_TOOLCHAIN_FILE="${project.basedir}/toolchain/Aarch64.cmake"</cmake.generator.arg>
        <cmake.generator.nativelibdir>${os.detected.name}_arm64</cmake.generator.nativelibdir>
        <!-- used to calculate if Java is running natively -->
        <maven.test.skip.compare>aarch64 [Linux]</maven.test.skip.compare>
      </properties>
    </profile>

  </profiles>
</project>
